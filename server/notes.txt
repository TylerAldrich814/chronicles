─ ═ |┃⌇╏┊┇║〣≡
  ┌──────────────────────────╮ deployment.yaml ╭────────────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    └─> When you deploy a cluster to GKE, you can go to your console
        and obtain the exact deployment.yaml file.
        ┃─> GKE -> Workloads -> ${CLUSTER} -> YAML(last item in tab)
        └─> You can also EDIT this in-the-browser deployment.yaml file
            and the edits will take effect.

        ○ You can deploy a local deployment.yaml file with this command.
        └─> kubectl apply -f ./deployment.yaml
        ○ Kubernetes YAML Files - Deployment & Service Examples
     ┌───deployment.yaml──────────────────────────────────────────────────────┐
     │   apiVersion: apps/v1                                                  │
     │  kind: Deployment                                                      │
     │  metadata:                                                             │
     │    labels:                                                             │
     │      app: ${IMAGE_NAME(hello-world-api)}                               │
     │    name: ${IMAGE_NAME(hello-world-api)}                                │
     │    namespace: default                                                  │
     │  spec:                                                                 │
     │    replicas: 3                                                         │
     │    selector:                                                           │
     │      matchLabels:                                                      │
     │        app: ${IMAGE_NAME(hello-world-api)}                             │
     │    template:                                                           │
     │      metadata:                                                         │
     │        app: ${IMAGE_NAME(hello-world-api)}                             │
     │      spec:                                                             │
     │        containers:                                                     │
     │        - image: ${PROJECT_ID}/${IMAGE_NAME}:0.0.1.RELEASE              │
     │          name: ${IMAGE_NAME(hello-world-api)}                          │
     └────────────────────────────────────────────────────────────────────────┘
     ┌───service.yaml─────────────────────────────────────────────────────────┐
     │  apiVersion: apps/v1                                                   │
     │  kind: service                                                         │
     │  metadata:                                                             │
     │    labels:                                                             │
     │      app: ${IMAGE_NAME(hello-world-api)}                               │
     │    name: ${IMAGE_NAME(hello-world-api)}                                │
     │    namespace: default                                                  │
     │  spec:                                                                 │
     │    ports:                                                              │
     │    - port: 8080                                                        │
     │      protocol: TCP                                                     │
     │      targetPort: 8080                                                  │
     │    selector:                                                           │
     │      app: ${IMAGE_NAME(hello-worlds-api)}                              │
     │    sessionAffinity: None                                               │
     │    type: LoadBalancer                                                  │
     └────────────────────────────────────────────────────────────────────────┘
  ┌──────────────╮ Kubernetes Cluster Creation & Deployment ╭───────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
  --> ○ Kubernetes Cluster Credentials Update after Initialization <--
    └─> gcloud container clusters get-credentials ${CLUSTER_NAME} \
          --region us-east5 \
          --project ${PROJECT_ID}

  --> ○ Deploying onto a specific Kubernetes Cluster <--
    └─> kubectl create deployment ${NAME_OF_DEPLOYMENT} \
          --image=${DOCKER_IMAGE_NAME}

  --> ○ Accessing Kubernetes Clusters <--
    ■ Create Deployment & Service using 'kubectl' commands:
      └─> kubectl expose deployment ${NAME_OF_DEPLOYMENT} \
            --types=LoadBalancer \
            --port=8080

  --> ○ Check the Status of a Kubernetes Cluster
    └─> kubectl get services
      ○ - To Watch in real time for Cluster Updates
    └─> kubectl get services --watch

  --> ○ Updating Kubernetes Cluster <--
    │─> docker build -t chronicles-server:v{x} .
    │─> docker tag chronicles-server:v{x} gcr.io/ta-chitchat-backend/chronicles-server:v{x}
    └─> docker push gcr.io/ta-chitchat-backend/chronicles-server:v{x}

  --> ○ Adding additional Node Pools to a Kubernetes Cluster <--
    │ │ You will typically get this command from the gcloud console cluster creation screen
    │ │ But here is an example of what it'll look.
    └─> gcloud beta container \
          --project "${PROJECT_ID}" node-pools create "${NEW_POOLNAME}"
          --cluster "${KUBERNETES_CLUSTER_NAME}"
          --region "us-east5"
          --node-version "1.27.3-gke.100"
          --machine-type "e2-medium"
          --image-type "COS_CONTAINERD"
          --disk-type "pd-balanced"
          --disk-size "100"
          --metadata disable-legacy-endpoints=true
          --scopes "https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/logging.write","https://www.googleapis.com/auth/monitoring","https://www.googleapis.com/auth/servicecontrol","https://www.googleapis.com/auth/service.management.readonly","https://www.googleapis.com/auth/trace.append"
          --num-nodes "3"
          --enable-autoupgrade
          --enable-autorepair
          --max-surge-upgrade 1
          --max-unavailable-upgrade 0

  ┌────────────────────╮ kubernetes service & ingree ╭──────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ Service :│: Are sets of Pods with a Network endpoint that can be used
               │  for disovery and load balancing
    ○ Ingress :│: Are collections of rules for routing external HTTP(S)
               │  traffic to Services. Ingress is used for directing traffic
               │  to your internal Kubernetes Services.

  ┌────────────╮ Increasing number of Micro Service Instances ╭─────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ Scaling :│: Scaling your Kubernete Clusters by specifying the number
               │  of Instances using the '--replicas' cli argument.
    └─> kubectl scale deployment ${CLUSTER_NAME} \
          -- replicas=3
    ○ Sanity  :│: Using the following command will show you if your commadn
               │  was successful or not.
    └─> kubecli get deployment
    $-> NAME              READY   UP-TO-DATE   AVAILABLE   AGE
        hello-world-api   3/3     1            3           52m
    └─> kubecli get pods
    $-> NAME                            READY   STATUS     RESTARTS   AGE
        Kube-cluster-5dcdbdbfc4-8vk6b   1/3     Running    0          420s
        NAME                            READY   STATUS     RESTARTS   AGE
        Kube-cluster-5dcdbdbfc4-9dy3x   2/3     Running    0          420s
        NAME                            READY   STATUS     RESTARTS   AGE
        Kube-cluster-5dcdbdbfc4-666yh   3/3     Running    0          69m

  ┌──────────────────╮ Scaling up a Kubernetes Cluster ╭────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ When you run into your Pod's instance limit, you'll need to extend your
     node limit by scaling up your Cluster.
    └─> gcloud container clusters resize ${CLUSTER_NAME} \
          --node-pool ${NODE_POOL_NAME} \
          --num-nodes 5

  ┌────────────────────────────╮ Auto Scaling ╭─────────────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ Setting up Auto Scaling for your Microservice.
    ○ Also known as "Horizontal Pod AutoScaling" - HPA -
    │─> kubectl get deployments // To get ${CLUSTER_NAME}
    │─> kubectl autoscale deployment ${CLUSTER_NAME} \
    │     --max=10 \
    │     --cpu-percent=69
    └─> kubectl get hpa
    ○ Setup Auto Scaling for your Kubernetes Clusters
    └─> gcloud constainer clusters update ${CLUSTER_NAME} \
          --enable-autoscaling
          --min-nodes=1 \
          --max-nodes=10

  ┌───────────────────────╮ Adding Config Maps(DB) ╭────────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ Configuration: Adding some configuration for your Microservice.
    │─> kubecli create configmap ${NEW_CONFIGURATION_MAP_NAME}
    │     --from-literal=RDS_DB_NAME=todos
    │─> kubecli get configmap
    └─> kubecli describe configmap ${NEW_CONFIGURATION_MAP_NAME}

  ┌─────────────────────╮ Add Password Configuration ╭──────────────────────┐
  └─────────────────────────────────────────────────────────────────────────┘
    ○ Known as 'Kubernetes Secretes'
    │─> kubectl create secret generic ${KUBERNETES_SECRETS_NAME} \
    │     --from-literal=RDS_PASSWORD=dummysecrets
    │─> kubectl get secret
    └─> kubectl describe secret ${KUBERNETES_SECRETS_NAME}
